from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from services.catalog_service import load_catalog, get_product
from services.cart_service import add_to_cart
from services.user_service import get_user_balance

router = Router()

@router.message(Command("catalog"))
async def show_catalog(message: Message):
    catalog = load_catalog()
    for item in catalog:
        text = f"üì∫ <b>{item['brand']} {item['model']}</b>\nüí∞ <b>{item['price']} –≥—Ä–Ω</b>"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫", callback_data=f"add_{item['id']}")]
        ])
        await message.answer(text, reply_markup=kb)

@router.callback_query(lambda c: c.data and c.data.startswith("add_"))
async def handle_add_callback(callback: CallbackQuery):
    product_id = int(callback.data.replace("add_", ""))
    user_id = callback.from_user.id

    product = get_product(product_id)
    if not product:
        return await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)

    balance = get_user_balance(user_id)
    if balance is None:
        return await callback.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å: /register", show_alert=True)

    if balance < product["price"]:
        return await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–æ {product['price']} –≥—Ä–Ω", show_alert=True)

    add_to_cart(user_id, product_id)
    await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞", show_alert=False)
